// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/rewriter_config.proto

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RewriterConfig_Toggle int32

const (
	RewriterConfig_DEFAULT RewriterConfig_Toggle = 0
	RewriterConfig_ON      RewriterConfig_Toggle = 1
	RewriterConfig_OFF     RewriterConfig_Toggle = 2
	// Enable some aggressive optimizations that use assumptions that TF graphs
	// may break. For example, assume the shape of a placeholder matches its
	// actual feed.
	RewriterConfig_AGGRESSIVE RewriterConfig_Toggle = 3
)

var RewriterConfig_Toggle_name = map[int32]string{
	0: "DEFAULT",
	1: "ON",
	2: "OFF",
	3: "AGGRESSIVE",
}
var RewriterConfig_Toggle_value = map[string]int32{
	"DEFAULT":    0,
	"ON":         1,
	"OFF":        2,
	"AGGRESSIVE": 3,
}

func (x RewriterConfig_Toggle) String() string {
	return proto.EnumName(RewriterConfig_Toggle_name, int32(x))
}
func (RewriterConfig_Toggle) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{1, 0} }

type RewriterConfig_MemOptType int32

const (
	// The default setting (currently disabled)
	RewriterConfig_DEFAULT_MEM_OPT RewriterConfig_MemOptType = 0
	// Disabled in the meta-optimizer.
	RewriterConfig_NO_MEM_OPT RewriterConfig_MemOptType = 1
	// Driven by manual op-level annotations.
	RewriterConfig_MANUAL RewriterConfig_MemOptType = 2
	// Driven by heuristics. The behavior of these heuristics is subject to
	// change. Currently includes an experimental recomputation and swapping
	// heuristics. Manual annotations are respected, but additional nodes are
	// selected automatically.
	RewriterConfig_SWAPPING_HEURISTICS      RewriterConfig_MemOptType = 4
	RewriterConfig_RECOMPUTATION_HEURISTICS RewriterConfig_MemOptType = 5
	// Use any combination of swapping and recomputation heuristics.
	RewriterConfig_HEURISTICS RewriterConfig_MemOptType = 3
)

var RewriterConfig_MemOptType_name = map[int32]string{
	0: "DEFAULT_MEM_OPT",
	1: "NO_MEM_OPT",
	2: "MANUAL",
	4: "SWAPPING_HEURISTICS",
	5: "RECOMPUTATION_HEURISTICS",
	3: "HEURISTICS",
}
var RewriterConfig_MemOptType_value = map[string]int32{
	"DEFAULT_MEM_OPT":          0,
	"NO_MEM_OPT":               1,
	"MANUAL":                   2,
	"SWAPPING_HEURISTICS":      4,
	"RECOMPUTATION_HEURISTICS": 5,
	"HEURISTICS":               3,
}

func (x RewriterConfig_MemOptType) String() string {
	return proto.EnumName(RewriterConfig_MemOptType_name, int32(x))
}
func (RewriterConfig_MemOptType) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{1, 1} }

type AutoParallelOptions struct {
	Enable      bool  `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	NumReplicas int32 `protobuf:"varint,2,opt,name=num_replicas,json=numReplicas" json:"num_replicas,omitempty"`
}

func (m *AutoParallelOptions) Reset()                    { *m = AutoParallelOptions{} }
func (m *AutoParallelOptions) String() string            { return proto.CompactTextString(m) }
func (*AutoParallelOptions) ProtoMessage()               {}
func (*AutoParallelOptions) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *AutoParallelOptions) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *AutoParallelOptions) GetNumReplicas() int32 {
	if m != nil {
		return m.NumReplicas
	}
	return 0
}

type RewriterConfig struct {
	// Optimize tensor layouts
	LayoutOptimizer RewriterConfig_Toggle `protobuf:"varint,1,opt,name=layout_optimizer,json=layoutOptimizer,enum=tensorflow.RewriterConfig_Toggle" json:"layout_optimizer,omitempty"`
	// Fold constants (default is ON)
	ConstantFolding RewriterConfig_Toggle `protobuf:"varint,3,opt,name=constant_folding,json=constantFolding,enum=tensorflow.RewriterConfig_Toggle" json:"constant_folding,omitempty"`
	// Arithmetic optimizations (default is ON)
	ArithmeticOptimization RewriterConfig_Toggle `protobuf:"varint,7,opt,name=arithmetic_optimization,json=arithmeticOptimization,enum=tensorflow.RewriterConfig_Toggle" json:"arithmetic_optimization,omitempty"`
	// Control dependency optimizations (default is ON).
	DependencyOptimization RewriterConfig_Toggle `protobuf:"varint,8,opt,name=dependency_optimization,json=dependencyOptimization,enum=tensorflow.RewriterConfig_Toggle" json:"dependency_optimization,omitempty"`
	// If true, don't remove unnecessary ops from the graph
	DisableModelPruning bool `protobuf:"varint,2,opt,name=disable_model_pruning,json=disableModelPruning" json:"disable_model_pruning,omitempty"`
	// Configures memory optimization passes through the meta-optimizer. Has no
	// effect on manually requested memory optimization passes in the optimizers
	// field.
	MemoryOptimization RewriterConfig_MemOptType `protobuf:"varint,4,opt,name=memory_optimization,json=memoryOptimization,enum=tensorflow.RewriterConfig_MemOptType" json:"memory_optimization,omitempty"`
	// The prefix for nodes which are valid outputs of recomputations. Inputs to
	// nodes with this name prefix may be recomputed (subject either to manual
	// annotation of those input nodes or to manual annotation and heuristics
	// depending on memory_optimization), but the prefixed nodes themselves will
	// not be recomputed. Typically this will be "gradients/", indicating that
	// activations from the forward pass of a graph may be recomputed as inputs to
	// gradients, but may be adjusted if gradients are inside a name scope or if
	// inputs to non-gradients should be recomputed. Defaults to "gradients/" if
	// empty or not set.
	MemoryOptimizerTargetNodeNamePrefix string `protobuf:"bytes,6,opt,name=memory_optimizer_target_node_name_prefix,json=memoryOptimizerTargetNodeNamePrefix" json:"memory_optimizer_target_node_name_prefix,omitempty"`
	// Configures AutoParallel optimization passes either through the
	// meta-optimizer or when manually specified through the optimizers field.
	AutoParallel *AutoParallelOptions `protobuf:"bytes,5,opt,name=auto_parallel,json=autoParallel" json:"auto_parallel,omitempty"`
	// If non-empty, will use this as an alternative way to specify a list of
	// optimizations to turn on and the order of the optimizations (replacing the
	// meta-optimizer).
	//
	// Of the RewriterConfig options, only the AutoParallel configuration options
	// (the auto_parallel field) apply to manually requested optimization passes
	// ("autoparallel"). Memory optimization passes ("memory") invoked here are
	// not configurable (in contrast to memory optimization passes through the
	// meta-optimizer) and act only on manual op annotations.
	Optimizers []string `protobuf:"bytes,100,rep,name=optimizers" json:"optimizers,omitempty"`
}

func (m *RewriterConfig) Reset()                    { *m = RewriterConfig{} }
func (m *RewriterConfig) String() string            { return proto.CompactTextString(m) }
func (*RewriterConfig) ProtoMessage()               {}
func (*RewriterConfig) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *RewriterConfig) GetLayoutOptimizer() RewriterConfig_Toggle {
	if m != nil {
		return m.LayoutOptimizer
	}
	return RewriterConfig_DEFAULT
}

func (m *RewriterConfig) GetConstantFolding() RewriterConfig_Toggle {
	if m != nil {
		return m.ConstantFolding
	}
	return RewriterConfig_DEFAULT
}

func (m *RewriterConfig) GetArithmeticOptimization() RewriterConfig_Toggle {
	if m != nil {
		return m.ArithmeticOptimization
	}
	return RewriterConfig_DEFAULT
}

func (m *RewriterConfig) GetDependencyOptimization() RewriterConfig_Toggle {
	if m != nil {
		return m.DependencyOptimization
	}
	return RewriterConfig_DEFAULT
}

func (m *RewriterConfig) GetDisableModelPruning() bool {
	if m != nil {
		return m.DisableModelPruning
	}
	return false
}

func (m *RewriterConfig) GetMemoryOptimization() RewriterConfig_MemOptType {
	if m != nil {
		return m.MemoryOptimization
	}
	return RewriterConfig_DEFAULT_MEM_OPT
}

func (m *RewriterConfig) GetMemoryOptimizerTargetNodeNamePrefix() string {
	if m != nil {
		return m.MemoryOptimizerTargetNodeNamePrefix
	}
	return ""
}

func (m *RewriterConfig) GetAutoParallel() *AutoParallelOptions {
	if m != nil {
		return m.AutoParallel
	}
	return nil
}

func (m *RewriterConfig) GetOptimizers() []string {
	if m != nil {
		return m.Optimizers
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoParallelOptions)(nil), "tensorflow.AutoParallelOptions")
	proto.RegisterType((*RewriterConfig)(nil), "tensorflow.RewriterConfig")
	proto.RegisterEnum("tensorflow.RewriterConfig_Toggle", RewriterConfig_Toggle_name, RewriterConfig_Toggle_value)
	proto.RegisterEnum("tensorflow.RewriterConfig_MemOptType", RewriterConfig_MemOptType_name, RewriterConfig_MemOptType_value)
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/rewriter_config.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x41, 0x6f, 0xd3, 0x40,
	0x10, 0x85, 0x71, 0xd2, 0xba, 0xed, 0xb4, 0xa4, 0xd6, 0x06, 0x5a, 0x1f, 0x10, 0xa4, 0x41, 0x48,
	0x39, 0xa5, 0x52, 0x11, 0xdc, 0xdd, 0x36, 0x29, 0x91, 0x1a, 0xdb, 0xda, 0x38, 0x45, 0xe2, 0xb2,
	0xda, 0xc6, 0x93, 0x60, 0x61, 0xef, 0x5a, 0xeb, 0xb5, 0x4a, 0x39, 0xf3, 0x73, 0xf9, 0x01, 0x1c,
	0x91, 0x1d, 0xb7, 0xb1, 0x11, 0x42, 0x3d, 0xee, 0xcc, 0xbc, 0x6f, 0x9f, 0xde, 0xac, 0x0d, 0x43,
	0x8d, 0x22, 0x93, 0x6a, 0x19, 0xcb, 0xbb, 0xd3, 0x85, 0x54, 0x78, 0x9a, 0x2a, 0xa9, 0xe5, 0x6d,
	0xbe, 0x3c, 0x55, 0x78, 0xa7, 0x22, 0x8d, 0x8a, 0x2d, 0xa4, 0x58, 0x46, 0xab, 0x61, 0xd9, 0x20,
	0xb0, 0x99, 0xef, 0xfb, 0xd0, 0x75, 0x72, 0x2d, 0x7d, 0xae, 0x78, 0x1c, 0x63, 0xec, 0xa5, 0x3a,
	0x92, 0x22, 0x23, 0x47, 0x60, 0xa2, 0xe0, 0xb7, 0x31, 0xda, 0x46, 0xcf, 0x18, 0xec, 0xd2, 0xea,
	0x44, 0x4e, 0xe0, 0x40, 0xe4, 0x09, 0x53, 0x98, 0xc6, 0xd1, 0x82, 0x67, 0x76, 0xab, 0x67, 0x0c,
	0xb6, 0xe9, 0xbe, 0xc8, 0x13, 0x5a, 0x95, 0xfa, 0xbf, 0x4c, 0xe8, 0xd0, 0xea, 0xde, 0x8b, 0xf2,
	0x5a, 0x72, 0x0d, 0x56, 0xcc, 0xef, 0x65, 0xae, 0x99, 0x4c, 0x75, 0x94, 0x44, 0x3f, 0x50, 0x95,
	0xdc, 0xce, 0xd9, 0x49, 0xcd, 0xfb, 0xb0, 0xa9, 0x1a, 0x06, 0x72, 0xb5, 0x8a, 0x91, 0x1e, 0xae,
	0xa5, 0xde, 0x83, 0xb2, 0xa0, 0x2d, 0xa4, 0xc8, 0x34, 0x17, 0x9a, 0x2d, 0x65, 0x1c, 0x46, 0x62,
	0x65, 0xb7, 0x9f, 0x4c, 0x7b, 0x90, 0x8e, 0xd7, 0x4a, 0xf2, 0x05, 0x8e, 0xb9, 0x8a, 0xf4, 0xd7,
	0x04, 0x75, 0xb4, 0x78, 0xf0, 0xc7, 0x8b, 0x14, 0xec, 0x9d, 0xa7, 0x42, 0x8f, 0x36, 0x04, 0xaf,
	0x06, 0x28, 0xd8, 0x21, 0xa6, 0x28, 0x42, 0x14, 0x8b, 0xfb, 0x26, 0x7b, 0xf7, 0xc9, 0xec, 0x0d,
	0xa1, 0xc1, 0x3e, 0x83, 0x97, 0x61, 0x94, 0x15, 0x4b, 0x61, 0x89, 0x0c, 0x31, 0x66, 0xa9, 0xca,
	0x45, 0x11, 0x45, 0xab, 0x5c, 0x58, 0xb7, 0x6a, 0x4e, 0x8b, 0x9e, 0xbf, 0x6e, 0x91, 0x1b, 0xe8,
	0x26, 0x98, 0x48, 0xf5, 0x97, 0x97, 0xad, 0xd2, 0xcb, 0xbb, 0xff, 0x78, 0x99, 0x62, 0xe2, 0xa5,
	0x3a, 0xb8, 0x4f, 0x91, 0x92, 0x35, 0xa1, 0xe1, 0x65, 0x0e, 0x83, 0x26, 0x17, 0x15, 0xd3, 0x5c,
	0xad, 0x50, 0x33, 0x21, 0x43, 0x64, 0x82, 0x27, 0xc8, 0x52, 0x85, 0xcb, 0xe8, 0xbb, 0x6d, 0xf6,
	0x8c, 0xc1, 0x1e, 0x7d, 0xdb, 0xa0, 0xa0, 0x0a, 0xca, 0x69, 0x57, 0x86, 0xe8, 0xf2, 0x04, 0xfd,
	0x72, 0x94, 0x5c, 0xc2, 0x73, 0x9e, 0x6b, 0xc9, 0xd2, 0xea, 0x71, 0xda, 0xdb, 0x3d, 0x63, 0xb0,
	0x7f, 0xf6, 0xa6, 0x6e, 0xf4, 0x1f, 0x8f, 0x97, 0x1e, 0xf0, 0x5a, 0x91, 0xbc, 0x06, 0x78, 0x74,
	0x95, 0xd9, 0x61, 0xaf, 0x3d, 0xd8, 0xa3, 0xb5, 0x4a, 0xff, 0x23, 0x98, 0xeb, 0xa8, 0xc9, 0x3e,
	0xec, 0x5c, 0x8e, 0xc6, 0xce, 0xfc, 0x3a, 0xb0, 0x9e, 0x11, 0x13, 0x5a, 0x9e, 0x6b, 0x19, 0x64,
	0x07, 0xda, 0xde, 0x78, 0x6c, 0xb5, 0x48, 0x07, 0xc0, 0xb9, 0xba, 0xa2, 0xa3, 0xd9, 0x6c, 0x72,
	0x33, 0xb2, 0xda, 0xfd, 0x9f, 0x06, 0xc0, 0x26, 0x17, 0xd2, 0x85, 0xc3, 0x4a, 0xcc, 0xa6, 0xa3,
	0x29, 0xf3, 0xfc, 0x02, 0xd2, 0x01, 0x70, 0xbd, 0xc7, 0xb3, 0x41, 0x00, 0xcc, 0xa9, 0xe3, 0xce,
	0x9d, 0x6b, 0xab, 0x45, 0x8e, 0xa1, 0x3b, 0xfb, 0xec, 0xf8, 0xfe, 0xc4, 0xbd, 0x62, 0x9f, 0x46,
	0x73, 0x3a, 0x99, 0x05, 0x93, 0x8b, 0x99, 0xb5, 0x45, 0x5e, 0x81, 0x4d, 0x47, 0x17, 0xde, 0xd4,
	0x9f, 0x07, 0x4e, 0x30, 0xf1, 0xdc, 0x7a, 0x77, 0xbb, 0x40, 0xd6, 0xce, 0xed, 0xf3, 0x0f, 0x60,
	0x4b, 0xb5, 0xaa, 0x47, 0xb2, 0x54, 0x3c, 0xc1, 0x3b, 0xa9, 0xbe, 0x9d, 0xbf, 0x68, 0xae, 0xd1,
	0x2f, 0xbe, 0xfe, 0xcc, 0x37, 0x7e, 0x1b, 0xc6, 0xad, 0x59, 0xfe, 0x0a, 0xde, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x49, 0x9e, 0xd8, 0xc7, 0x3c, 0x04, 0x00, 0x00,
}
